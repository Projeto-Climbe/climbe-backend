model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

enum ProposalStatus {
  pendente
  aceita
  rejeitada
  cancelada
  em_analise
}

enum DocumentType {
  balanco
  dre
  gerenciais
  cnpj
  contrato_social
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  fullName        String
  email           String   @unique
  cpf             String   @unique
  phone           String
  password        String
  roleId          Int?
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  profilePicture  String?
  oauthProvider   String?
  oauthProviderId String?

  role Role? @relation(fields: [roleId], references: [id], onDelete: SetNull)

  permissions        UserPermission[]
  notifications      notifications[]
  document           Document[]
  participacoes      ParticipantesReuniao[]
  oauthAccounts      OAuthAccount[]
  propostas          Propostas[]
  passwordResetToken PasswordResetToken?
}

model OAuthAccount {
  id             Int       @id @default(autoincrement())
  provider       String
  providerUserId String
  accessToken    String    @db.Text
  refreshToken   String?   @db.Text
  scope          String?   @db.Text
  idToken        String?   @db.Text
  profilePicture String?
  rawProfile     Json?
  expiresAt      DateTime?
  userId         Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerUserId])
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[]
}

model Permission {
  id          Int    @id @default(autoincrement())
  description String @unique

  users UserPermission[]
}

model UserPermission {
  id           Int @id @default(autoincrement())
  userId       Int
  permissionId Int

  user       User       @relation(fields: [userId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId])
}

model Empresa {
  id_empresa         Int     @id @default(autoincrement())
  nome_fantasia      String  @db.VarChar(255)
  razao_social       String  @db.VarChar(255)
  cnpj               String  @unique(map: "cnpj") @db.VarChar(18)
  inscricao_estadual String? @db.VarChar(50)
  endereco           String? @db.VarChar(255)
  cidade             String? @db.VarChar(255)
  estado             String? @db.VarChar(100)
  cep                String? @db.VarChar(30)
  telefone           String? @db.VarChar(20)
  email              String? @db.VarChar(255)

  Representante Representante?

  reunioes             Reunioes[]
  Propostas            Propostas[]
  ParticipantesReuniao ParticipantesReuniao[]
  document             Document[]
  companyService       CompanyService[]
}

model Representante {
  id_representante Int     @id @default(autoincrement())
  nome_legal       String? @db.VarChar(255)
  cpf              String? @unique @db.VarChar(14)
  rg               String? @db.VarChar(20)
  endereco         String? @db.VarChar(255)
  cidade           String? @db.VarChar(255)
  estado           String? @db.VarChar(100)

  empresa_id Int     @unique
  empresa    Empresa @relation(fields: [empresa_id], references: [id_empresa], onDelete: Cascade)

  @@map("representantes")
}

model Service {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)

  companyService CompanyService[]
}

model Contratos {
  id_contrato Int       @id @default(autoincrement())
  id_proposta Int
  data_inicio DateTime? @db.Date
  data_fim    DateTime? @db.Date
  status      String?

  proposta Propostas @relation(fields: [id_proposta], references: [id_proposta], onDelete: Cascade)

  relatorios Relatorios[]
  planilha   Planilha[]
  reunioes   Reunioes[]

  @@map("contratos")
}

// Modelo de Relatorios
model Relatorios {
  id_relatorio Int       @id @default(autoincrement())
  contrato_id  Int
  url_pdf      String
  data_envio   DateTime? @db.Date

  contrato Contratos @relation(fields: [contrato_id], references: [id_contrato])

  @@map("relatorios")
}

model Propostas {
  id_proposta  Int             @id @default(autoincrement())
  empresa_id   Int
  usuario_id   Int?
  status       ProposalStatus? @default(pendente)
  data_criacao DateTime?       @db.Date

  // Relacionamentos
  empresa   Empresa     @relation(fields: [empresa_id], references: [id_empresa], onDelete: Cascade)
  usuario   User?       @relation(fields: [usuario_id], references: [id], onDelete: SetNull)
  contratos Contratos[]

  @@map("propostas")
}

model notifications {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String   @db.VarChar(500)
  createdAt DateTime @default(now())

  // Relacionamento com User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Model para a reunioes
model Reunioes {
  id_reuniao      Int       @id @default(autoincrement())
  titulo          String?
  empresa_id      Int
  data            DateTime? @db.Date
  hora            String? // Mantenho como String se a hora for salva em formato simples (e.g. "10:00:00")
  horaFim         String?
  durationMinutes Int?
  presencial      Boolean?
  local           String?   @db.VarChar(255)
  roomId          Int?
  contratoId      Int?
  pauta           String?   @db.Text
  status          String?

  empresa  Empresa      @relation(fields: [empresa_id], references: [id_empresa], onDelete: Cascade)
  room     MeetingRoom? @relation(fields: [roomId], references: [id])
  contrato Contratos?   @relation(fields: [contratoId], references: [id_contrato])

  participantes ParticipantesReuniao[]

  @@map("reunioes")
}

model MeetingRoom {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  location String?    @db.VarChar(255)
  capacity Int?
  reunioes Reunioes[]

  @@map("meeting_rooms")
}

model ParticipantesReuniao {
  id_reuniao Int
  id_usuario Int
  id_empresa Int

  reunioes Reunioes @relation(fields: [id_reuniao], references: [id_reuniao], onDelete: Cascade)

  usuarios User @relation(fields: [id_usuario], references: [id], onDelete: Cascade) // Assumindo que 'User' é o nome do seu modelo de usuários

  empresa Empresa @relation(fields: [id_empresa], references: [id_empresa], onDelete: Cascade)

  @@id([id_reuniao, id_usuario])
  @@map("participantes_reuniao")
}

model Planilha {
  id                Int     @id @default(autoincrement())
  id_contrato       Int
  url_google_sheets String? @db.VarChar(255)
  blocked           Boolean
  view_permission   String? @db.VarChar(255)

  contrato Contratos @relation(fields: [id_contrato], references: [id_contrato], onDelete: Cascade)
}

model Document {
  id         Int          @id @default(autoincrement())
  id_empresa Int
  type       DocumentType
  url        String       @db.VarChar(255)
  validated  Boolean      @default(false) // na modelagem esse campo é VARCVHAR(5), mas faz mais sentido ser Boolean
  analystId  Int?         

  empresa    Empresa @relation(fields: [id_empresa], references: [id_empresa], onDelete: Cascade)
  id_analyst User?    @relation(fields: [analystId], references: [id])
}

model CompanyService {
  id         Int @id @default(autoincrement())
  id_empresa Int
  id_service Int

  empresa Empresa @relation(fields: [id_empresa], references: [id_empresa], onDelete: Cascade)
  service Service @relation(fields: [id_service], references: [id])
}
